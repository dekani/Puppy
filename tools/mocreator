#!/bin/sh
#(c) Barry Kauler Feb 2012 bkhome.org
#licence GPL3 refer /usr/share/doc/legal
#the intention of this script is to manage non-english translations of files.
#this is to include shell scripts, xml, .desktop and menu files.
#translation will only be for the current language, and UTF-8 must be enabled.
#120205 first release, handle gettext'ed scripts.
#120206 added internationalization management of menu.
#120206 simplify gui with help buttons.
#120206 add management of menu categories.
#120207 write translations to a folder in /root with full path, write.log, generate tarball.
#120208 support SSS domains. (read comments in /usr/share/sss/menu_strings/menu_strings for more info)
#120208 sync translated sss-file with master sss-file.
#120209 desk_strings domain translates target files in-place, so need workaround when edit TRANSLATION variables in desk_strings.*
#120209 ...ditto for script_strings
#120210 add handling XML files.
#120212 some tweaks.
#120213 rodin.s: xgettext does not work properly on alsaconf script, use ready-made alsaconf.pot (in Woof).
#120213 added management of binary executables.
#120214 generate a langpack PET package.
#120215 added management of initrd files (initrd_strings SSS domain).
#120217 small message fixes.
#120217 support poeditor.
#120218 LANG=${ORIGLANG} prefix needed various places. 120219 a few more.
#120220 need 'head -n1' ex: /usr/local/petget/ui_Classic has export TEXTDOMAIN in two places.
#120224 add 'doc_strings' sss domain, for translating entire files (typically documentation files). 120225 improvements.
#120225 checkbox window to select what documentation files to edit. modify edit-complete message.
#120228 sync doc_strings sss file.
#120307 ROX-Filer now translated via /usr/share/doc/nls/ROX-Filer/ROX-Filer.pot
#120308 ROX-Filer .mo files are not in standard location. workaround when intltool-update fails.
#120309 binary executables, option to retain po file for later editing (instead of uncompile mo).
#120313 langpack pet help msg improved.
#120313 langpack pet: offer to find more po, mo, pot and t12s translations.
#120316 scoop up more translations. 120317 L18L: add man pages.
#120216 small mod. to a message.
#120729 L18L: problem gettext'ing zigbert's apps, which have a lot of scripts, but would like to combine into one .pot file.
#120731 revert 120729.
#120731 any script can have a pre-existing .pot file in /usr/share/doc/nls, it will automatically be used instead of generating a .pot file.
#120731 multiple scripts can have the same TEXTDOMAIN. these scripts can be anywhere. a single .pot will be created/edited.
#120926 want to accumulate many .desktop files (not just for installed pkgs), in /usr/share/applications.in.
#121124 edit script_strings.*, 'read -r' so backslash chars are not escapes.
#130502 L18L/BK: stay in a loop if there is an error converting .po to .mo.
#130503 test if .po file changed.
#130503 L18L: rename AppInfo.xml to AppInfo.xml.in for langpack
#130505 L18L: quick version: caching variables in CACHE/... from 2m to 2s
#130512 acknowledge new translators, deleting /tmp/momanager
#130519 L18L bug fix: instead of APKGNAME use ASCRIPT, DESKFILE, XMLFILE, ABIN; code for sss and menu categories unchanged
#130520 L18L bug fix: multiple scripts for 1 TEXTDOMAIN
#130521 L18L bug fix binaries, update NOCNT,YESCNT
#130522 L18L bug fix 1 line NOXML_XML and multiple scripts
#130525 L18L replace intltool-update by msgmerge
#all following updates by L18L 
#130602 sort binaries, sort scripts case insensitive by basename
#130603 preferences, create/modify configuration file /root/.config/momanager
#130604 search button added, --empty-- fixed
#130605 check_dates
#130606 bug fix create_mo, ~/.config/momanager edited
#130607 changing all 'MoManager-${ORIGLANG12' to 'MoManager-${transLANG' requested by Bert
#130609 list left and right scripts: Base name:PATH
#130610 use html, css to highlight pattern in search result; list left and right binary executables: Base name:PATH
#130610 search output with context
#130611 configuration simplified
#130612 fix for desk_strings not showing up in editor reported by AbdelAziz
#130613 design for small sreens; WINDOW_WIDTH configurable between 726 an 1360 px
#130620 force console borderless=off because Bert requested search results being closeable
#130806 sync added
#131001 transLANG added to output of search (ex: mo files under transLANG=fr not fr_BE)
#131002 last edited mo file at top of list # Bert's old wish for edit_mo
#131013 delete harmful pot files
#131014 WINDOW_WIDTH no more in preferences
#131015 output directory MOMADIR for MoManager-* files configurable by preferences
#131026 fit for fatdog64 has gettext in /etc; pupdialog needs declaration as dependency
#131028 added animation for translation of Comment in /usr/share/applications/*.desktop 
#131029 support for language=Glade added (-j join existing)
#131104 insert 'export TEXTDOMAIN=' into *.sh.xml.sh (temporary copy of *.sh.xml)
#131110 acknowledge Bert's MM-standalone.pet instead of devx
#131206 make it fatdog compatible, LANGPACK=langpack | langpack_fatdog
#131212 support t12s method
#131219 enable quirky6.0: no check on pupmode
#140101 bugfix thanks zephyr2
#140103 window_width changed, no test on existance of intltool-update, gettext alternative for devx
#140104 LANGPACK=langpack | langpack_fatdog | langpack_quirky
#140223 LANGPACK=langpack | langpack_fatdog only; bug fix for "up-to-date" or "check-needed"
#140227 running  faster
#140228 code cleaning, find fuzzy
#140303 fuzzy bug fix
#140307 find all-fuzzies at start, new sort of scripts that have a mo file, refresh button
#140308 update list of fuzzies for YESMO
#140309 update list of fuzzies for NOMO
#140326 pre-caution: if create_pet then clear cache
#140906 Dekani: update code to create a default resource repository

#***MOCREATOR IS ENGLISH ONLY (NOT GETTEXT'ED)***
#it is for use by developers/translators with knowledge of english.

# Function : debug information in console
debug() {
  # passed param $1 is information to display
  if [ "$DEBUG" = "y" ];then
    echo $1
  fi
}

# Functions : Repository functions
copy_to_repository() {
  # passed param $1 is file to copy to repository 
  cp --parents "$1" "$REPODIR"
  debug "Store file: $1"
}

update_mo() {
  #ex: $1 ='/usr/sbin/mousecheck (de mousecheck.mo)'
  ASCRIPT="`echo -n "$1" | cut -f 1 -d '(' | rev | cut -f 2-9 -d ' ' | rev`"
  ANAME="`basename "$ASCRIPT"`"
  ATRANSLANG="`echo -n "$1" | cut -f 2 -d '(' | cut -f 1 -d ' '`" #ex: de
  AMO="`echo -n "$1" | cut -f 2 -d '(' | cut -f 1 -d ')' | cut -f 2 -d ' '`" #ex: mousecheck.mo
  APKGNAME="`echo -n "$YESMO_COMBO" | cut -f 2 -d '(' | cut -f 1 -d ')' | cut -f 3 -d ' '`" #ex: bluefish  ex: WOOF
  AMOSPEC="/usr/share/locale/${ATRANSLANG}/LC_MESSAGES/${AMO}"
  ATEXTDOMAIN="`basename $AMO .mo`"
  cp -f "$AMOSPEC" ${WORKDIR}/${ATEXTDOMAIN}.moOLD
  msgunfmt "$AMOSPEC" > ${WORKDIR}/${ATEXTDOMAIN}1.po
  CURDIR="`pwd`"
  cd "${WORKDIR}"
  case $ATEXTDOMAIN in
   alsaconf)
    #rodin.s: xgettext does not work properly on alsaconf script, use ready-made alsaconf.pot (in Woof).
    cp -f /usr/share/doc/nls/alsaconf/alsaconf.pot ./
   ;;
   *)
    #120731 why not generalize the above. any script(s) can have a pre-existing .pot file and it will be used...
    if [ -f /usr/share/doc/nls/${ATEXTDOMAIN}/${ATEXTDOMAIN}.pot ];then
     cp -f /usr/share/doc/nls/${ATEXTDOMAIN}/${ATEXTDOMAIN}.pot ./
    else
     #120731 multiple scripts may have the same TEXTDOMAIN...
     tdPTN="^export TEXTDOMAIN=${ATEXTDOMAIN}"
     EXTRASCRIPTS="$(echo "${GETTEXTSCRIPTS}" | tr ' ' '\n' | xargs -I INPUTFILE grep --files-with-matches -w "${tdPTN}" INPUTFILE | sed -e 's%SPACECHAR% %g')"
     if [ "$EXTRASCRIPTS" ];then
      echo -n "" > ./xEXTRASCRIPTS
      echo "$EXTRASCRIPTS" |
      while read ONEEXTRA
      do
       [ "$ONEEXTRA" = "" ] && continue
       [ ! -f "$ONEEXTRA" ] && continue #precaution.
       ONEBASE="$(basename "${ONEEXTRA}" .sh)"
       cp -f "$ONEEXTRA" ./${ONEBASE}.sh
       echo "${ONEBASE}.sh" >> ./xEXTRASCRIPTS
      done
       LANG=${ORIGLANG} rxvt -e xgettext -o ${ATEXTDOMAIN}.pot --no-wrap `cat ./xEXTRASCRIPTS`
     fi
    fi
   ;;
  esac
  #this syncs textdomain1.po and textdomain.pot, merges to textdomain.po ...
  rm -f ${ATEXTDOMAIN}.po 2>/dev/null
  #130526 L18L: intltool-update fails with ROX-Filer and xdialog, but msgmerge works...
  #LANG=${ORIGLANG} rxvt -e intltool-update --dist --gettext-package=${ATEXTDOMAIN} --output-file=${ATEXTDOMAIN}.po ${ATEXTDOMAIN}1
  LANG=${ORIGLANG} rxvt -e msgmerge ${ATEXTDOMAIN}1.po ${ATEXTDOMAIN}.pot --output-file=${ATEXTDOMAIN}.po ; #130526 L18L
  #120308 intltool-update is broken with some pot files. need a fallback method...
  if [ ! -s ${ATEXTDOMAIN}.po ];then
   LANG=${ORIGLANG} rxvt -e msginit --no-wrap --locale=${ORIGLANG12} --output-file=${ATEXTDOMAIN}.po --input=${ATEXTDOMAIN}.pot #create po file without any translations.
  fi
  
  cd "${CURDIR}"
  APODIR="/usr/share/locale/${ATRANSLANG}/LC_MESSAGES/"
  mkdir -p "${REPODIR}${APODIR}"
  cp -f "${WORKDIR}/${ATEXTDOMAIN}.po" "${REPODIR}${APODIR}"

  debug "Store file: ${REPODIR}${APODIR}${ATEXTDOMAIN}.po"

  export LANG=$ORIGLANG
}

create_mo() {
  #ex: $1='/usr/sbin/mousecheck (mousecheck)'
  ASCRIPT="`echo -n "$1" | cut -f 1 -d '(' | rev | cut -f 2 -d ' ' | rev`"
  ATEXTDOMAIN="`echo -n "$1" | cut -f 2 -d '(' | cut -f 1 -d ' '`"
  APKGNAME="`echo -n "$1" | cut -f 2 -d '(' | cut -f 1 -d ')' | cut -f 2 -d ' '`" #ex: bluefish  ex: WOOFBUILTIN
  FIELD2ND="`echo -n "$1" | cut -f 2 -d '_'`"
  if [ $? -eq 0 ];then
   ATRANSLANG="$ORIGLANG1"
  else
   ATRANSLANG="$ORIGLANG12"
  fi
  ANAME="`basename "$ASCRIPT"`"
  AMO="${ATEXTDOMAIN}.mo"
  AMOSPEC="/usr/share/locale/${ATRANSLANG}/LC_MESSAGES/${AMO}"
  mkdir -p /usr/share/locale/${ATRANSLANG}/LC_MESSAGES
  CURDIR="`pwd`"
  cd "${WORKDIR}"
  case $ATEXTDOMAIN in
   alsaconf)
    #rodin.s: xgettext does not work properly on alsaconf script, use ready-made alsaconf.pot (in Woof).
    cp -f /usr/share/doc/nls/alsaconf/alsaconf.pot ./
   ;;
   *)
    #120731 why not generalize the above. any script(s) can have a pre-existing .pot file and it will be used...
    if [ -f /usr/share/doc/nls/${ATEXTDOMAIN}/${ATEXTDOMAIN}.pot ];then
     cp -f /usr/share/doc/nls/${ATEXTDOMAIN}/${ATEXTDOMAIN}.pot ./
    else
     #120731 multiple scripts may have the same TEXTDOMAIN...
     tdPTN="^export TEXTDOMAIN=${ATEXTDOMAIN}"
      EXTRASCRIPTS="$(echo "${GETTEXTSCRIPTS}" | tr ' ' '\n' | xargs -I INPUTFILE grep --files-with-matches -w "${tdPTN}" INPUTFILE | sed -e 's%SPACECHAR% %g')"
     if [ "$EXTRASCRIPTS" ];then
      echo -n "" > ./xEXTRASCRIPTS
      echo "$EXTRASCRIPTS" |
      while read ONEEXTRA
      do
       [ "$ONEEXTRA" = "" ] && continue
       [ ! -f "$ONEEXTRA" ] && continue #precaution.
       ONEBASE="$(basename "${ONEEXTRA}" .sh)"
       cp -f "$ONEEXTRA" ./${ONEBASE}.sh
       echo "${ONEBASE}.sh" >> ./xEXTRASCRIPTS
      done
      LANG=${ORIGLANG} rxvt -e xgettext -o ${ATEXTDOMAIN}.pot --no-wrap `cat ./xEXTRASCRIPTS`
      aPTN="s%Project-Id-Version: PACKAGE VERSION%Project-Id-Version: ${ANAME} VERSION%"
      bPTN="s%Content-Type: text/plain; charset=CHARSET%Content-Type: text/plain; charset=UTF-8%"
      cPTN="s% PACKAGE package% ${ANAME} package%"
      sed -i -e "$aPTN" -e "$bPTN" -e "$cPTN" ${ATEXTDOMAIN}.pot
     fi
    fi
   ;;
  esac
  LANG=${ORIGLANG} rxvt -e msginit --no-wrap --locale=${ORIGLANG12} --output-file=${ATEXTDOMAIN}.po --input=${ATEXTDOMAIN}.pot
  sync
  
  cd "${CURDIR}"
  APODIR="/usr/share/locale/${ATRANSLANG}/LC_MESSAGES/"
  mkdir -p "${REPODIR}$APODIR"
  cp -f "${WORKDIR}/${ATEXTDOMAIN}.po" "${REPODIR}${APODIR}"

  debug "Store file: ${REPODIR}${APODIR}${ATEXTDOMAIN}.po"

  export LANG=$ORIGLANG
}

create_sss() {
  #BK's Simple String Substitution method.
  APKGNAME="WOOF"
  SSSFILE="$1" #ex: menu_strings (located at /usr/share/sss/menu_strings/)
  cp -f /usr/share/sss/$SSSFILE/$SSSFILE "${WORKDIR}/${SSSFILE}.${ORIGLANG1}"
  sync
  
  #120224 special handling req'd for doc_strings...
  if [ "$SSSFILE" = "doc_strings" ];then
   cp -f /usr/share/sss/$SSSFILE/$SSSFILE /usr/share/sss/$SSSFILE/$SSSFILE.$ORIGLANG1
   
   #now edit the doc files...
   for ASECTIONID in `grep '^\[' /usr/share/sss/$SSSFILE/${SSSFILE}.${ORIGLANG1} | tr -d '[' | tr -d ']' | tr '\n' ' '` #ex: general _usr_local_petget_help.htm
   do
    [ "$ASECTIONID" = "general" ] && continue
    sPTN="/^\[${ASECTIONID}\]/,/^$/p" #this is a multi-line block find expression.
    CODEBLOCK="`sed -n "$sPTN" /usr/share/sss/$SSSFILE/${SSSFILE}.${ORIGLANG1} | sed -e '/^#/d' -e '/^$/d' -e '/^\[/d'`" #extracts just the relevant block of lines.
    [ ! "$CODEBLOCK" ] && continue #precaution.
    #allow any character to be the 'marker' for / in the section-id...
    MARKERCHAR="`echo -n "$ASECTIONID" | cut -c 1`"
    TARGETFILE="`echo -n "$ASECTIONID" | tr "${MARKERCHAR}" '/'`" #ex: /usr/local/petget/help.htm
    [ ! -f "$TARGETFILE" ] && continue #precaution.
    eval "$CODEBLOCK" #has variables SSS_HANDLER_EDITOR, SSS_TRANSLATION_RULE, SSS_HANDLER_VIEWER [, SSS_POST_EXEC]
    SSS_TRANSLATION_FILE="`echo -n "$SSS_TRANSLATION_RULE" | sed -e "s%SSSLANG1MARKER%${ORIGLANG1}%"`"
    if [ "$TARGETFILE" = "$SSS_TRANSLATION_FILE" ];then
     #the translation is completely replacing the english file, so make a backup of the en file...
     FILETYPE="`echo -n "$TARGETFILE" | rev | cut -f 1 -d '.' | rev`" #ex: htm
     ftPTN="s%\.${FILETYPE}$%-en.${FILETYPE}%"
     ENFILE="`echo -n "$TARGETFILE" | sed -e "$ftPTN"`"
     if [ ! -f "$ENFILE" ];then
      if [ -f ${PATHPREFIX}"${TARGETFILE}" ];then
       cp -f ${PATHPREFIX}"${TARGETFILE}" "$ENFILE" #get it from sfs layer, to ensure it is en.
      else
       cp -f "${TARGETFILE}" "$ENFILE"
      fi
     fi
     TARGETFILE="$ENFILE"
    fi
    [ ! -f "$SSS_TRANSLATION_FILE" ] && cp -a -f $TARGETFILE $SSS_TRANSLATION_FILE
	copy_to_repository $SSS_TRANSLATION_FILE
   done
  fi
  
  mkdir -p $REPODIR/usr/share/sss/$SSSFILE/
  cp -f "${WORKDIR}/{$SSSFILE}.{$ORIGLANG1}" $REPODIR/usr/share/sss/$SSSFILE/
  
  debug "File stored : $REPODIR/usr/share/sss/$SSSFILE/"
  
  export LANG=$ORIGLANG
}

update_sss() {
  APKGNAME="WOOF"
  SSSFILE="$1" #ex: menu_strings.de (located at /usr/share/sss/menu_strings/)
  SSSFILE="`echo -n "$SSSFILE" | rev | cut -f 2-9 -d '.' | rev`" #dump the extension, ex: menu_strings.de -> menu_strings

  #120224 special handling req'd for doc_strings...
  if [ "$SSSFILE" = "doc_strings" ];then
   #now edit the doc files...
   for ASECTIONID in `grep '^\[' /usr/share/sss/$SSSFILE/${SSSFILE}.${ORIGLANG1} | tr -d '[' | tr -d ']' | tr '\n' ' '` #ex: general _usr_local_petget_help.htm
   do
    [ "$ASECTIONID" = "general" ] && continue
    sPTN="/^\[${ASECTIONID}\]/,/^$/p" #this is a multi-line block find expression.
    CODEBLOCK="`sed -n "$sPTN" /usr/share/sss/$SSSFILE/${SSSFILE}.${ORIGLANG1} | sed -e '/^#/d' -e '/^$/d' -e '/^\[/d'`" #extracts just the relevant block of lines.
    [ ! "$CODEBLOCK" ] && continue #precaution.
    #allow any character to be the 'marker' for / in the section-id...
    MARKERCHAR="`echo -n "$ASECTIONID" | cut -c 1`"
    TARGETFILE="`echo -n "$ASECTIONID" | tr "${MARKERCHAR}" '/'`" #ex: /usr/local/petget/help.htm
    [ ! -f "$TARGETFILE" ] && continue #precaution.
    eval "$CODEBLOCK" #has variables SSS_HANDLER_EDITOR, SSS_TRANSLATION_RULE, SSS_HANDLER_VIEWER [, SSS_POST_EXEC]
    SSS_TRANSLATION_FILE="`echo -n "$SSS_TRANSLATION_RULE" | sed -e "s%SSSLANG1MARKER%${ORIGLANG1}%"`"
    if [ "$TARGETFILE" = "$SSS_TRANSLATION_FILE" ];then
     #the translation is completely replacing the english file, so make a backup of the en file...
     FILETYPE="`echo -n "$TARGETFILE" | rev | cut -f 1 -d '.' | rev`" #ex: htm
     ftPTN="s%\.${FILETYPE}$%-en.${FILETYPE}%"
     ENFILE="`echo -n "$TARGETFILE" | sed -e "$ftPTN"`"
     if [ ! -f "$ENFILE" ];then
      if [ -f ${PATHPREFIX}"${TARGETFILE}" ];then
       cp -f ${PATHPREFIX}"${TARGETFILE}" "$ENFILE" #get it from sfs layer, to ensure it is en.
      else
       cp -f "${TARGETFILE}" "$ENFILE"
      fi
     fi
     TARGETFILE="$ENFILE"
    fi
    [ ! -f "$SSS_TRANSLATION_FILE" ] && cp -a -f $TARGETFILE $SSS_TRANSLATION_FILE
	copy_to_repository $SSS_TRANSLATION_FILE
   done
  mkdir -p $REPODIR/usr/share/sss/$SSSFILE/
  cp -f "${WORKDIR}/${SSSFILE}.${ORIGLANG1}" $REPODIR/usr/share/sss/$SSSFILE/
  debug "File stored: $REPODIR/usr/share/sss/$SSSFILE/"
  #break   
  fi
  
  #sync translated sss-file with original (master) sss-file (/usr/share/sss/$SSSFILE/$SSSFILE)...
  #ex: 'menu_strings' is the master (no translations in it), 'menu_strings.de' has German translations.
  #(Woof developers only have to edit the master, and the translation sss-files will sync to it).
  #to do this properly have to write code that analyses the sss-files by section, that is, the files
  #have sections, separated by blank lines and headed by an identifier, ex "[_woof_.jwmrc]"
  #note: /usr/sbin/fixmenus has example sed to extract an sss section.
  echo -n "" > $WORKDIR/$SSSFILE.$ORIGLANG1
  for ASECTIONID in `grep '^\[' /usr/share/sss/${SSSFILE}/${SSSFILE} | tr -d '[' | tr -d ']' | tr '\n' ' '` #ex: general _woof_.jwmrc
  do
   sPTN="/^\[${ASECTIONID}\]/,/^$/p" #this is a multi-line block find expression.
   ENCODEBLOCK="`sed -n "$sPTN" /usr/share/sss/${SSSFILE}/${SSSFILE} | sed -e '/^$/d' -e '/^\[/d'`" #extracts just the relevant block of lines.
   case $ASECTIONID in
    general)
     #this section is just comments, pass it straight thru...
     echo '[general]' >> $WORKDIR/$SSSFILE.$ORIGLANG1
     echo "$ENCODEBLOCK" >> $WORKDIR/$SSSFILE.$ORIGLANG1
     echo  >> $WORKDIR/$SSSFILE.$ORIGLANG1
    ;;
    *)
     echo "[${ASECTIONID}]" >> $WORKDIR/$SSSFILE.$ORIGLANG1
     #find same section in the translated sss-file...
     TRCODEBLOCK="`sed -n "$sPTN" /usr/share/sss/${SSSFILE}/${SSSFILE}.${ORIGLANG1} | sed -e '/^$/d' -e '/^\[/d'`" #extracts just the relevant block of lines.
     echo "$TRCODEBLOCK" | #sed -e 's%\\%\\\\%g' | #121124 pass \ thru read
     while read -r ATRLINE #121124 -r then backslash is not an escape.
     do
      case $ATRLINE in
       CODESTRING*)
        eval "$ATRLINE"
        OKLINE="`echo "$ENCODEBLOCK" | grep "$CODESTRING" | grep "$ENGLISH"`"
        [ "$OKLINE" ] && echo "$ATRLINE" >> $WORKDIR/$SSSFILE.$ORIGLANG1 #match, so keep it.
       ;;
       *)
        echo "$ATRLINE" >> $WORKDIR/$SSSFILE.$ORIGLANG1 #probably a comment line.
       ;;
      esac
     done
     #now do it the other way around...
     echo "$ENCODEBLOCK" | #sed -e 's%\\%\\\\%g' | #121124 pass \ thru read
     while read -r AENLINE #121124 -r then backslash is not an escape.
     do
      case $AENLINE in
       CODESTRING*)
        eval "$AENLINE"
        OKLINE="`echo "$TRCODEBLOCK" | grep "$CODESTRING" | grep "$ENGLISH"`"
        [ ! "$OKLINE" ] && echo "$AENLINE" >> $WORKDIR/$SSSFILE.$ORIGLANG1 #new line not in translated sss-file, so write it (not yet translated).
       ;;
      esac
     done
     echo  >> $WORKDIR/$SSSFILE.$ORIGLANG1
    ;;
   esac
  done
  echo  >> $WORKDIR/$SSSFILE.$ORIGLANG1
  
  mkdir -p $REPODIR/usr/share/sss/$SSSFILE/
  cp -f $WORKDIR/$SSSFILE.$ORIGLANG1 $REPODIR/usr/share/sss/$SSSFILE/

  debug "File stored: $REPODIR/usr/share/sss/$SSSFILE/SSSFILE.$ORIGLANG1"
  
  export LANG=$ORIGLANG
}
  
generate_bin() {
  #binary executables.
  if [ "$2" = "edit_bin" ];then
   ABIN="`echo -n "$1" | cut -f 1 -d '(' | rev | cut -f 2-9 -d ' ' | rev`"
   ANAME="`basename "$ABIN"`"
   ATRANSLANG="`echo -n "$1" | cut -f 2 -d '(' | cut -f 1 -d ' '`" #ex: de
   AMO="`echo -n "$1" | cut -f 2 -d '(' | cut -f 1 -d ')' | cut -f 2 -d ' '`" #ex: mousecheck.mo
   APKGNAME="`echo -n "$1" | cut -f 2 -d '(' | cut -f 1 -d ')' | cut -f 3 -d ' '`" #ex: bluefish  ex: WOOF
   ATEXTDOMAIN="`basename $AMO .mo`"
  else
   ABIN="`echo -n "$1" | cut -f 1 -d '(' | rev | cut -f 2 -d ' ' | rev`"
   ATEXTDOMAIN="`echo -n "$1" | cut -f 2 -d '(' | cut -f 1 -d ' '`"
   APKGNAME="`echo -n "$1" | cut -f 2 -d '(' | cut -f 1 -d ')' | cut -f 2 -d ' '`" #ex: bluefish  ex: WOOF
   FIELD2ND="`echo -n "$ORIGLANG12" | cut -f 2 -d '_'`"
   # Remove choice, default language set to ORIGLANG1
   ATRANSLANG="$ORIGLANG1"
   #ATRANSLANG="$ORIGLANG12"
   ANAME="`basename "$ABIN"`"
   AMO="${ATEXTDOMAIN}.mo"
  fi
  PREFIXLOCALEDIR='/usr/share/locale' #120308
  #120308 there are exceptions to /usr/share/locale. unfortunately looks like i have to hard-code those...
  case $ATEXTDOMAIN in
   ROX-Filer) PREFIXLOCALEDIR='/usr/local/apps/ROX-Filer/Messages' ;;
  esac
  AMOSPEC="${PREFIXLOCALEDIR}/${ATRANSLANG}/LC_MESSAGES/${AMO}"
  mkdir -p "${PREFIXLOCALEDIR}/${ATRANSLANG}/LC_MESSAGES" #120308
  cp -f /usr/share/doc/nls/${ATEXTDOMAIN}/${ATEXTDOMAIN}.pot $WORKDIR

  CURDIR="`pwd`"
  cd "${WORKDIR}"

  if [ -f /usr/share/doc/nls/${ATEXTDOMAIN}/${ATRANSLANG}.po ];then #120309 use pre-existing po file.
   cp -f /usr/share/doc/nls/${ATEXTDOMAIN}/${ATRANSLANG}.po ./${ATEXTDOMAIN}.po
   [ -f "$AMOSPEC" ] && cp -f "$AMOSPEC" ${ATEXTDOMAIN}.moOLD
  else
   if [ "$2" = "edit_bin" ];then
    cp -f "$AMOSPEC" ${ATEXTDOMAIN}.moOLD
    msgunfmt "$AMOSPEC" > ${ATEXTDOMAIN}1.po
    #this syncs textdomain1.po and textdomain.pot, merges to textdomain.po ...
    rm -f ${ATEXTDOMAIN}.po 2>/dev/null
    #130526 L18L: intltool-update fails with ROX-Filer and xdialog, but msgmerge works...
    LANG=${ORIGLANG} rxvt -e msgmerge ${ATEXTDOMAIN}1.po ${ATEXTDOMAIN}.pot --output-file=${ATEXTDOMAIN}.po ; #130526 L18L
    #120308 intltool-update is broken with ROX-Filer.pot. need a fallback method...
    if [ ! -s ${ATEXTDOMAIN}.po ];then
     LANG=${ORIGLANG} rxvt -e msginit --no-wrap --locale=${ORIGLANG12} --output-file=${ATEXTDOMAIN}.po --input=${ATEXTDOMAIN}.pot #create po file without any translations.
    fi
   else
    LANG=${ORIGLANG} rxvt -e msginit --no-wrap --locale=${ORIGLANG12} --output-file=${ATEXTDOMAIN}.po --input=${ATEXTDOMAIN}.pot
   fi
  fi
  sync

  cd $CURDIR
  APODIR="${PREFIXLOCALEDIR}/${ATRANSLANG}/LC_MESSAGES/"
  mkdir -p "${REPODIR}$APODIR"
  cp -f "$WORKDIR/${ATEXTDOMAIN}.po" "${REPODIR}${APODIR}"

  debug "File Stored: ${REPODIR}${APODIR}${ATEXTDOMAIN}.po"
  export LANG=$ORIGLANG
}

#####SCRIPTS#######
build_scripts() {
 debug "Generate po files (scripts)..."
 #find all gettext'ed scripts...
 GETTEXTSCRIPTS="`find /bin /sbin /usr/bin /usr/sbin /usr/X11R7/bin /usr/local /etc/rc.d /root/my-applications/bin -maxdepth 4 -type f -executable | xargs -I INPUTFILE grep --files-with-matches '^export TEXTDOMAIN=' INPUTFILE | sed -e 's% %SPACECHAR%g' | sort | tr '\n' ' '`"

 #find all matching .mo files...
 for AGTS in $GETTEXTSCRIPTS
 do
  xAGTS="`echo -n $AGTS | sed -e 's%SPACECHAR% %g'`"
  #120731 what if code is: export TEXTDOMAIN='abc' or export TEXTDOMAIN="abc" remove the quotes... NO, not allowed to have quotes!!!!
  TEXTDOMAINVALUE="`grep '^export TEXTDOMAIN=' "$xAGTS" | head -n 1 | cut -f 2 -d '=' | tr '\t' ' ' | cut -f 1 -d ' '`" #1202120 need 'head -n1' ex: /usr/local/petget/ui_Classic has export TEXTDOMAIN in two places.

  #want to know if from Woof or a builtin pkg or later-installed pkg...
  BASExAGTS="`basename "$xAGTS"`"
  xPTN=" ${BASExAGTS}$"
  PATHxAGTS="`dirname "$xAGTS"`"
  xxPTN="^${PATHxAGTS}$"
  zPTN="^${xAGTS}$"
  aPKGNAME="`grep "$xPTN" /root/.packages/builtin_files/* | cut -f 1 -d ':' | rev | cut -f 1 -d '/' | rev`" #test if pkg used in Woof build.
  if [ "$aPKGNAME" ];then #confirm full path.
   for AAA in $aPKGNAME
   do
    CONFIRM="`cat /root/.packages/builtin_files/${AAA} | sed -e 's%^ %/%' | tr -d '\n' | grep "$xAGTS"`"
    if [ "$CONFIRM" ];then
     aPKGNAME="$AAA"
    break
    fi
   done
   [ ! "$CONFIRM" ] && aPKGNAME=""
  fi
  [ ! "$aPKGNAME" ] && aPKGNAME="`grep "$zPTN" /root/.packages/*.files 2>/dev/null | head -n 1 | cut -f 1 -d ':' | rev | cut -f 1 -d '/' | rev | sed -e 's%\.files$%%'`" #test if user-installed pkg. 120308
  #...return nothing if in Woof
  [ ! "$aPKGNAME" ] && [ -f "${PATHPREFIX}${xAGTS}" ] && aPKGNAME="WOOF" #file is in Woof.
  [ ! "$aPKGNAME" ] && aPKGNAME="UNKNOWN"

  FNDMO=""
  if [ -f /usr/share/locale/${ORIGLANG12}/LC_MESSAGES/${TEXTDOMAINVALUE}.mo ];then
   FNDMO="/usr/share/locale/${ORIGLANG12}/LC_MESSAGES/${TEXTDOMAINVALUE}.mo"
   TRANSLANG=$ORIGLANG12
  else
   if [ -f /usr/share/locale/${ORIGLANG1}/LC_MESSAGES/${TEXTDOMAINVALUE}.mo ];then
    FNDMO="/usr/share/locale/${ORIGLANG1}/LC_MESSAGES/${TEXTDOMAINVALUE}.mo"
    TRANSLANG=$ORIGLANG1
   fi
  fi
  if [ "$FNDMO" ];then
   update_mo "${xAGTS} (${TRANSLANG} ${TEXTDOMAINVALUE}.mo ${aPKGNAME})"
  else
   create_mo "${xAGTS} (${TEXTDOMAINVALUE} ${aPKGNAME})"
  fi
 done
}

#######MENU ENTRIES#######
#find out which .desktop files have [lang] entries already, create two lists...
build_menu_entries() {
 debug "Generate desktop files (menu entries)..."
 dPTN="\\[${ORIGLANG1}\\]"
 #for ADESKTOP in `find /usr/share/applications -mindepth 1 -maxdepth 1 -type f -name '*.desktop' | grep -v ' ' | sort | tr '\n' ' '`
 for ADESKTOP in `find /usr/share/applications -mindepth 1 -maxdepth 1 -type f -name '*.desktop' | grep -v ' ' | sort --ignore-case | tr '\n' ' '` #130602 sort case insensitive
 do
  [ "`grep '^Icon' $ADESKTOP`" = "" ] && continue #some dummy .desktop files used by xfce, ignore them.
  #ADESKNAME="`basename $ADESKTOP`"
  ADESKNAME="${ADESKTOP##*\/}" #140227 faster
 
  #find out what package it is from...
  xPTN=" ${ADESKNAME}$"
  zPTN="^${ADESKTOP}$"
  #aPKGNAME="`grep "$xPTN" /root/.packages/builtin_files/* | head -n 1 | cut -f 1 -d ':' | rev | cut -f 1 -d '/' | rev`" #test if pkg used in Woof build.
  aPKGNAME="`grep -m 1 "$xPTN" /root/.packages/builtin_files/* `" #| cut -f 1 -d ':' | rev | cut -f 1 -d '/' | rev`" #test if pkg used in Woof build. #140227 faster
  aPKGNAME="${aPKGNAME%%:*}" # | rev | cut -f 1 -d '/' | rev`" #test if pkg used in Woof build. #140227 faster
  aPKGNAME="${aPKGNAME##*\/}"  #test if pkg used in Woof build. #140227 faster

  #[ ! "$aPKGNAME" ] && aPKGNAME="`grep "$zPTN" /root/.packages/*.files 2>/dev/null | head -n 1 | cut -f 1 -d ':' | rev | cut -f 1 -d '/' | rev | sed -e 's%\.files$%%'`" #test if user-installed pkg. 120308
  if [ ! "$aPKGNAME" ]; then #140227 faster
   aPKGNAME="`grep -m 1 "$zPTN" /root/.packages/*.files 2>/dev/null `"
   aPKGNAME="${aPKGNAME%%:*}" # see above
   aPKGNAME="${aPKGNAME##*\/}"  # see above
   aPKGNAME="${aPKGNAME/\.files/}" # sed -e 's%\.files$%%'`"
  fi #140227 faster
  #...return nothing if in Woof
  [ ! "$aPKGNAME" ] && [ -f "${PATHPREFIX}${ADESKTOP}" ] && aPKGNAME="WOOF" #file is in Woof.
  [ ! "$aPKGNAME" ] && aPKGNAME="UNKNOWN"

  if [ "`grep "$dPTN" $ADESKTOP`" != "" ];then

   #[ "$isFATDOG" -a "`grep .${ADESKTOP} /root/.packages/langpack_de-*`" ] && continue #131206 Fatdog: take just those files that are not in basic langpack
   #[ "$isFATDOG" -a "`grep ${TEXTDOMAINVALUE}.mo /root/.packages/langpack_${transLANG}-*`" ] && continue #131206 Fatdog: take just those files that are not in basic langpack #140101

   if [ "$isFATDOG" -o "$isQUIRKY" ]; then #take just those files that are not in basic langpack #140104
    [ "`grep ${TEXTDOMAINVALUE}.mo /root/.packages/langpack_${transLANG}-*`" ] && continue
   fi
   copy_to_repository "/usr/share/applications/${ADESKNAME}"
  else
   copy_to_repository "/usr/share/applications/${ADESKNAME}"
   sed -i -e "s%^Name=%Name[${ORIGLANG1}]=PLEASE INSERT YOUR TRANSLATION HERE\\nName=%" "$REPODIR/usr/share/applications/$ADESKNAME"
  fi
 done
}

#######MENU TITLES#######
#this gives us the list of .directory files in /usr/share/desktop-directories for the top-level titles... ex: Puppy-Setup.directory
build_menu_titles() {
  debug "Generate directory files (menu titles)..."
  TOPMENUFILES="`grep -m1 '<Directory>' /etc/xdg/menus/puppy-[^S]*.menu | cut -f 2 -d '>' | cut -f 1 -d '<' | grep 'directory$' | sort | tr '\n' ' '`"
  dPTN="^Name\\[${ORIGLANG1}\\]"
  for ATOPMENUFILE in $TOPMENUFILES
  do
   copy_to_repository "/usr/share/desktop-directories/${ATOPMENUFILE}"

   if [ "`grep "$dPTN" /usr/share/desktop-directories/$ATOPMENUFILE`" == "" ];then
     sed -i -e "s%^Name=%Name[${ORIGLANG1}]=PLEASE INSERT YOUR TRANSLATION HERE\\nName=%" $REPODIR/usr/share/desktop-directories/$ATOPMENUFILE
   fi
  done
}

#######XML#######
#search $PATHPREFIX to avoid devx files...
build_xml() {
  debug "Generate xml files..."
  #XMLFILES="`find ${PATHPREFIX}/usr/local -type f -name '*.xml' | sed "s%^${PATHPREFIX}%%" | sed -e 's% %SPACECHAR%g' | tr '\n' ' '`" #ex: /usr/local/apps/Connect/AppInfo.xml
  XMLFILES="`find /usr/local -type f -name '*.xml' | sed -e 's% %SPACECHAR%g' | tr '\n' ' '`" #ex: /usr/local/apps/Connect/AppInfo.xml
  aPTN="xml:lang=\"${ORIGLANG1}\""  #ex: xml:lang="de"
  bPTN="xml:lang=\"${ORIGLANG12}\"" #ex: xml:lang="de_DE"
  for AXMLFILE in $XMLFILES
  do
   #AXMLFILE="`echo -n "$AXMLFILE" | sed -e 's%SPACECHAR% %g'`"
   AXMLFILE="${AXMLFILE//SPACECHAR/ }" #140227 faster 

   #[ "`echo -n "$AXMLFILE" | grep 'apps/ROX-Filer/'`" != "" ] && continue #120307 ROX-Filer now translated via /usr/share/doc/nls/ROX-Filer/ROX-Filer.pot
   #120308 ...no, we still need to edit this, see User Manual.
   #140227 never needed this (experience)
   [ "`echo -n "$AXMLFILE" | grep 'apps/ROX-Filer/'`" != "" ] && continue #120307 ROX-Filer now translated via /usr/share/doc/nls/ROX-Filer/ROX-Filer.pot
 
   #want to know if from Woof or a builtin pkg or later-installed pkg...
   #BASEAXMLFILE="`basename "$AXMLFILE"`"
   BASEAXMLFILE="${AXMLFILE##*\/}" #140227 faster
 
   xPTN=" ${BASEAXMLFILE}$"
   #PATHAXMLFILE="`dirname "$AXMLFILE"`"
   PATHAXMLFILE="${AXMLFILE%\/*}" #140227 faster

   xxPTN="^${PATHAXMLFILE}$"
   zPTN="^${AXMLFILE}$"
   aPKGNAME="`grep "$xPTN" /root/.packages/builtin_files/* | cut -f 1 -d ':' | rev | cut -f 1 -d '/' | rev`" #test if pkg used in Woof build.
   if [ "$aPKGNAME" ];then #confirm full path.
    for AAA in $aPKGNAME
    do
     #CONFIRM="`cat /root/.packages/builtin_files/${AAA} | sed -e 's%^ %/%' | tr -d '\n' | grep "$AXMLFILE"`"
     CONFIRM="`sed -e 's%^ %/%' /root/.packages/builtin_files/${AAA} | tr -d '\n' | grep "$AXMLFILE"`"
     if [ "$CONFIRM" ];then
      aPKGNAME="$AAA"
      break
     fi
    done
    [ ! "$CONFIRM" ] && aPKGNAME=""
   fi
   [ ! "$aPKGNAME" ] && aPKGNAME="`grep "$zPTN" /root/.packages/*.files 2>/dev/null | head -n 1 | cut -f 1 -d ':' | rev | cut -f 1 -d '/' | rev | sed -e 's%\.files$%%'`" #test if user-installed pkg. 120308
   #...return nothing if in Woof
   [ ! "$aPKGNAME" ] && [ -f "${PATHPREFIX}${AXMLFILE}" ] && aPKGNAME="WOOF" #file is in Woof.
   [ ! "$aPKGNAME" ] && aPKGNAME="UNKNOWN"
 
   copy_to_repository "${AXMLFILE}"
  done
}

#######SSS#######
#Simple String Substitution
#manage translations in many non-executable data files.
#translations are kept in /usr/share/sss/$SSSDOMAIN/$SSSDOMAIN.$ORIGLANG1 ex: SSSDOMAIN=menu_strings ORIGLANG1=de
build_sss() {
  debug "Generate Simple String Substitution files..."
  for ASSSDOMAIN in `find /usr/share/sss -mindepth 1 -maxdepth 1 -type d | sed -e 's%^/usr/share/sss/%%' | tr '\n' ' '`
  do
   #120224 doc_strings is a special case, the translated file is elsewhere...
   if [ -f /usr/share/sss/${ASSSDOMAIN}/${ASSSDOMAIN}.${ORIGLANG1} ];then
    if [ "$ASSSDOMAIN" = "doc_strings" ];then
     cp -f /usr/share/sss/${ASSSDOMAIN}/${ASSSDOMAIN} /usr/share/sss/${ASSSDOMAIN}/${ASSSDOMAIN}.${ORIGLANG1} #120228 must always be same as orig.
     TRANSFLAG='fail'
     TRANSLATEDFILES="`grep '^SSS_TRANSLATION_RULE' /usr/share/sss/${ASSSDOMAIN}/${ASSSDOMAIN}.${ORIGLANG1} | cut -f 2 -d "'" | sed -e "s%SSSLANG1MARKER%${ORIGLANG1}%" | tr '\n' ' '`" #'geanyfix
     for ATRANSLATEDFILE in $TRANSLATEDFILES
     do
      if [ -f $ATRANSLATEDFILE ];then
       TRANSFLAG='success'
      fi
     done
     [ "$TRANSFLAG" = "fail" ] && rm -f /usr/share/sss/${ASSSDOMAIN}/${ASSSDOMAIN}.${ORIGLANG1} #because translated file(s) does not exist.
    fi
   fi

   if [ -f /usr/share/sss/${ASSSDOMAIN}/${ASSSDOMAIN}.${ORIGLANG1} ];then
    #there is already a translation.
    update_sss ${ASSSDOMAIN}.${ORIGLANG1}
   else
    create_sss ${ASSSDOMAIN}
   fi
  done
}

########Binary executables#######
#support a limited number of binary executables that have .pot files in /usr/share/doc/nls
build_binaries() {
  debug "Generate po files (binaries)..."
  for ANLSDIR in `ls -1 /usr/share/doc/nls | tr '\n' ' '`
  do
   if [ -d  /usr/share/doc/nls/${ANLSDIR} ];then
 
    #120309 po files may now be there... ex: /usr/share/doc/nls/ROX-Filer/de.po
    FNDPO="`find /usr/share/doc/nls/${ANLSDIR} -mindepth 1 -maxdepth 1 -type f -name '*.po' | tr '\n' ' '`"
    for APO in $FNDPO
    do
     copy_to_repository "$APO"
    done
 
    BINEXEC=""
    BINEXEC="`which $ANLSDIR`"
    [ ! "$BINEXEC" ] && BINEXEC="`find /usr/local -maxdepth 4 -executable -type f -name "$ANLSDIR"`" #ex: /usr/local/simple_network_setup/proxy-setup
    if [ "$BINEXEC" ];then
     if [ "`file "$BINEXEC" | grep ' ELF ' | grep 'LSB executable'`" != "" ];then
      #have found binary executable for the pot file...
      TEXTDOMAINVALUE="$ANLSDIR" #TEXTDOMAIN must be same as executable name.
    
      #want to know if from Woof or a builtin pkg or later-installed pkg...
      BASEBINEXEC="`basename "$BINEXEC"`"
      xPTN=" ${BASEBINEXEC}$"
      PATHBINEXEC="`dirname "$BINEXEC"`"
      xxPTN="^${PATHBINEXEC}$"
      zPTN="^${BINEXEC}$"
      aPKGNAME="`grep "$xPTN" /root/.packages/builtin_files/* | cut -f 1 -d ':' | rev | cut -f 1 -d '/' | rev`" #test if pkg used in Woof build.
      if [ "$aPKGNAME" ];then #confirm full path.
       for AAA in $aPKGNAME
       do
        CONFIRM="`cat /root/.packages/builtin_files/${AAA} | sed -e 's%^ %/%' | tr -d '\n' | grep "$BINEXEC"`"
        if [ "$CONFIRM" ];then
         aPKGNAME="$AAA"
         break
        fi
       done
       [ ! "$CONFIRM" ] && aPKGNAME=""
      fi
      [ ! "$aPKGNAME" ] && aPKGNAME="`grep "$zPTN" /root/.packages/*.files 2>/dev/null | head -n 1 | cut -f 1 -d ':' | rev | cut -f 1 -d '/' | rev | sed -e 's%\.files$%%'`" #test if user-installed pkg. 120308
      #...return nothing if in Woof
      [ ! "$aPKGNAME" ] && [ -f "${PATHPREFIX}${BINEXEC}" ] && aPKGNAME="WOOF" #file is in Woof.
      [ ! "$aPKGNAME" ] && aPKGNAME="UNKNOWN"
    
      FNDMO=""
      PREFIXLOCALEDIR='/usr/share/locale' #120308
      if [ -f /usr/share/locale/${ORIGLANG12}/LC_MESSAGES/${TEXTDOMAINVALUE}.mo ];then
       FNDMO="/usr/share/locale/${ORIGLANG12}/LC_MESSAGES/${TEXTDOMAINVALUE}.mo"
       TRANSLANG=$ORIGLANG12
      else
       if [ -f /usr/share/locale/${ORIGLANG1}/LC_MESSAGES/${TEXTDOMAINVALUE}.mo ];then
        FNDMO="/usr/share/locale/${ORIGLANG1}/LC_MESSAGES/${TEXTDOMAINVALUE}.mo"
        TRANSLANG=$ORIGLANG1
       fi
      fi
      #120308 ROX-Filer is example where .mo is elsewhere. search all roxapps..
      if [ ! "$FNDMO" ];then
       FNDMO="`find /usr/local/apps -type f -name "${TEXTDOMAINVALUE}.mo"`"
       TRANSLANG=$ORIGLANG1
       PREFIXLOCALEDIR="`echo -n "$FNDMO" | sed -e 's%/LC_MESSAGES.*%%' | rev | cut -f 2-9 -d '/' | rev`" #ex: /usr/local/apps/ROX-Filer/Messages/de/LC_MESSAGES/ROX-Filer.mo, extract /usr/local/apps/ROX-Filer/Messages
      fi
      if [ "$FNDMO" ];then
       generate_bin "${BINEXEC} (${TRANSLANG} ${TEXTDOMAINVALUE}.mo ${aPKGNAME})" "edit_bin"
      else
       generate_bin "${BINEXEC} (${TEXTDOMAINVALUE} ${aPKGNAME})" "create_bin"
      fi
     fi
    fi
   fi
  done
}

PROGNAME="`basename $0`"

#131206 some texts
LANGPACK='langpack' #131206
PUPPY='Puppy'
TRANSLATE='fully translate Puppy'
isFATDOG= ; read LINE < /etc/issue ; [ "${LINE:0:6}" = "Fatdog" ] && isFATDOG=true
isQUIRKY= ; read LINE < /etc/issue ; [ "${LINE:0:6}" = "Quirky" ] && isQUIRKY=true #140104

[ "$isQUIRKY" = "true" ] && isQUIRKY=  #140223 no specials for Quirky

if [ "$isFATDOG" ]; then
 LANGPACK='langpackFatdog'
 PUPPY='Fatdog'
 TRANSLATE='add translations for Fatdog'
fi
#131206
if [ "$isQUIRKY" ]; then
 LANGPACK='langpackQuirky'
 PUPPY='Quirky'
 TRANSLATE='add translations for Quirky'
fi
#140104

#if [[ "$REPODIR" != /* ]]; then
#  echo "Please specify an absolute path for repository pathname"
#  exit 1
#fi

ORIGLANG=$LANG
export LANG=C
. /etc/rc.d/PUPSTATE

GTKDIALOGEXE="gtkdialog"
[ "`which gtkdialog4`" ] && GTKDIALOGEXE="gtkdialog4"
ADATE="`date +%Y%m%d`" #ex: 20120205
WINICON="gtk-preferences"; HELPICON="gtk-index" #gtk-info

ORIGLANG1="`echo -n $ORIGLANG | cut -f 1 -d '_'`"  #ex: de
ORIGLANG12="`echo -n $ORIGLANG | cut -f 1 -d '.'`" #ex: de_DE

if [ "$ORIGLANG1" = "en" ];then
 pupdialog --title "${PROGNAME}: abort" --background pink --colors --msgbox "This application is intended for creation and editing of non-English translations of scripts, but your locale is currently \Zb${ORIGLANG}\ZB. Click the \Zbsetup\ZB icon on the desktop to change locale (and be sure to enable UTF-8). Aborting." 0 0
 exit 1
fi
if [ "`echo -n $ORIGLANG | grep -i 'utf'`" = "" ];then
 pupdialog --title "${PROGNAME}: abort" --background pink --colors --msgbox "Sorry, your \Zblocale\ZB (language) must have UTF-8 enabled to use this application. Click the \Zbsetup\ZB icon on the desktop to change locale. Aborting." 0 0
 exit 1
fi

MISSINGFILE=""
[ "`which xgettext`" = "" ] && MISSINGFILE="${MISSINGFILE}xgettext "
[ "`which msginit`" = "" ] && MISSINGFILE="${MISSINGFILE}msginit "
[ "`which msgfmt`" = "" ] && MISSINGFILE="${MISSINGFILE}msgfmt "
[ "`which msgunfmt`" = "" ] && MISSINGFILE="${MISSINGFILE}msgunfmt "
[ "`which urxvt`" = "" ] && MISSINGFILE="${MISSINGFILE}urxvt " #130610
if [ "`which pupdialog`" ];then #131026
 :
else
  Xdialog --title "${PROGNAME}: Abort" --infobox "pupdialog has not been found here" 0 0 10000 #131026
  exit #131026
fi #131026
if [ "$MISSINGFILE" ];then
 pupdialog --title "${PROGNAME}: abort" --background pink --colors --msgbox "Sorry, these needed applications are missing: \Zb${MISSINGFILE}\ZB. The \Zbdevx\ZB SFS normally has these, but it must be incomplete. Or use Bert's i18n-tools or install package gettext. Aborting." 0 0 #140103 gettext package will also do it
 exit 1
fi

if [ "$isFATDOG" -o "$isQUIRKY" ]; then #140104
  if [ "`ls /root/.packages/langpack_${transLANG}-* 2>/dev/null`" = "" ] ; then
   pupdialog --title "${PROGNAME}: abort" --background pink --colors --msgbox "Sorry, this needed basic langpack from puppy is missing: \Zblangpack_${transLANG}\ZB. The \Zbcommon repository\ZB normally has this PET. Aborting." 0 0
   exit 1
  fi #131206
fi #140101

PATHPREFIX=""
case $PUPMODE in
 2) PATHPREFIX="" ;; #full hd installation.
 3) PATHPREFIX="" ;;
 *) PATHPREFIX="/initrd/pup_ro2" ;;
esac
if [ "$PATHPREFIX" = "" ];then
 pupdialog --title "${PROGNAME} abort" --background pink --colors --msgbox "Sorry, the PUPMODE must be a value greater than 3, that is, not be a full hd installation. Aborting."
 exit 1
fi
ppPTN="s%${PATHPREFIX}%%"

CONFIG="/root/.config/${PROGNAME}"
[ ! -f $CONFIG ] && echo "### edit between = and #   
REPODIR=../repo/${ORIGLANG1}
WORKDIR=../work/${PROGNAME}
DEBUG=n
" > $CONFIG
. $CONFIG

REPODIR="$REPODIR"
mkdir -p "$REPODIR"

rm -R "$WORKDIR"
mkdir -p "$WORKDIR"

# Display main menu

MOCREATOR_DLG="<window title=\"$PROGNAME : ${PUPPY} files\" resizable=\"false\" icon-name=\"${WINICON}\">
 <vbox>
  <frame>
   <hbox>
    <text xalign=\"1\" use-markup=\"true\" ><label>\"Working directory : $WORKDIR\"</label></text>
   </hbox>
   <hbox>
    <text xalign=\"1\" use-markup=\"true\" ><label>\"Repository directory : $REPODIR\"</label></text>
   </hbox>
   <hbox>
    <text xalign=\"1\" use-markup=\"true\" ><label>\"\"</label></text>
   </hbox>
   <hbox>
    <text xalign=\"1\" use-markup=\"true\" ><label>Settings are stored in '$CONFIG' file.</label></text>
   </hbox>
  </frame>
  <hbox>
   <button><label>Cancel</label><action>EXIT:cancel</action></button>
   <button><label>Generate</label><action>EXIT:generate</action></button>
  </hbox>
 </vbox>
</window>
"
export MOCREATOR_DLG

MOBUILDER_RET="`$GTKDIALOGEXE --program=MOCREATOR_DLG`"
eval "$MOBUILDER_RET"
case $EXIT in

generate)
  WAITMSG="Please wait, generate files..."
  debug "${WAITMSG}"
  yaf-splash -bg orange -text "${WAITMSG}" &
  yPID=$!

  TRANSLANG=""

  #build_scripts
  build_menu_entries
  build_menu_titles
  #build_xml
  #build_sss
  #build_binaries
  
  # close waiting dialog 
  debug "Repository generated..."
  kill $yPID &>/dev/null
  ;;

esac

exit 0

###END###